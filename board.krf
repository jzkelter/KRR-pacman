(in-microtheory PacPersonMt)
(genlMt PacPersonMt QualitativeMechanicsMt)

;; ontologize

(isa blocked Predicate)
(arity blocked 1)
(arg1Isa blocked 2DNonDiagonal)
(comment blocked "(blocked ?direction) says that ?direction is blocked")

(isa facing Predicate)
(arity facing 1)
(arg1Isa facing 2DNonDiagonal)
(comment facing "(facing ?direction) says that PacPerson is facing ?direction")

(isa directionToFace Predicate)
(arity directionToFace 1)
(arg1Isa directionToFace 2DNonDiagonal)
(comment directionToFace "(direcionToFace ?direction) says that PacPerson should next face ?direction")

(isa pellet Predicate)
(arity pellet 1)
(arg1Isa pellet 2DNonDiagonal)
(comment pellet "(pellet ?direction) says that there is a pellet at ?direction")

(isa noSurroundingPellets Predicate)
(arity noSurroundingPellets 0)
(comment noSurroundingPellets "(noSurroundingPellets) says there are no pellets around PacPerson")


(<== (noSurroundingPellets)
        (uninferredSentence (pellet Up))
        (uninferredSentence (pellet Right))
        (uninferredSentence (pellet Down))
        (uninferredSentence (pellet Left))
)
;; if there's a pellet, face it
(<== (directionToFace ?direction)
        (pellet ?direction)
)
;; if there are no pellets and you're facing a direction that
;; isn't blocked, keep facing that way
(<== (directionToFace ?direction)
        (noSurroundingPellets)
        (facing ?direction)
        (uninferredSentence (blocked ?direction))
)

;; if there are no pellets and you're facing a direction that
;; is blocked, face a direction that isn't
(<== (directionToFace ?directionB)
        (noSurroundingPellets)
        (facing ?directionA)
        (blocked ?directionA)
        (isa ?directionB 2DNonDiagonal)
        (uninferredSentence (blocked ?directionB))
)

;; preferInContext (if you have multiple which one to pick)